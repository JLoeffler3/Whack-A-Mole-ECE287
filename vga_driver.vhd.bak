----------------------------------------------------------------------------------
-- Company: 
-- Engineer: 
-- 
-- Create Date:    16:17:27 12/28/2016 
-- Design Name: 
-- Module Name:    vga_driver - Behavioral 
-- Project Name: 
-- Target Devices: 
-- Tool versions: 
-- Description: 
--
-- Dependencies: 
--
-- Revision: 
-- Revision 0.01 - File Created
-- Additional Comments: 
--
----------------------------------------------------------------------------------
library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.STD_LOGIC_UNSIGNED.ALL;
use IEEE.NUMERIC_STD.ALL;

-- Uncomment the following library declaration if instantiating
-- any Xilinx primitives in this code.
--library UNISIM;
--use UNISIM.VComponents.all;

entity vga_driver is
    Port ( CLK : in  STD_LOGIC;
           RST : in  STD_LOGIC;
			  MLE1 : in std_logic;
			  MLE2 : in std_logic;
			  MLE3 : in std_logic;
			  MLE4 : in std_logic;
			  MODE : in std_logic_vector(4 downto 0);
           HSYNC : out  STD_LOGIC;
           VSYNC : out  STD_LOGIC;
			  R : out std_logic_vector(7 downto 0);
			  G : out std_logic_vector(7 downto 0);
			  B : out std_logic_vector(7 downto 0);
			  VGA_CLOCK : out std_logic
			  );
end vga_driver;

architecture Behavioral of vga_driver is

	signal clk25 : std_logic := '0';
	
	constant HD : integer := 639;  --  639   Horizontal Display (640)
	constant HFP : integer := 16;         --   16   Right border (front porch)
	constant HSP : integer := 96;       --   96   Sync pulse (Retrace)
	constant HBP : integer := 48;        --   48   Left boarder (back porch)
	
	constant VD : integer := 479;   --  479   Vertical Display (480)
	constant VFP : integer := 10;       	 --   10   Right border (front porch)
	constant VSP : integer := 2;				 --    2   Sync pulse (Retrace)
	constant VBP : integer := 33;       --   33   Left boarder (back porch)
	
	signal hPos : integer := 0;
	signal vPos : integer := 0;
	
	signal videoOn : std_logic := '0';
	
	signal mh1 : integer := 300;
	signal mh2 : integer := 300;
	signal mh3 : integer := 300;
	signal mh4 : integer := 300;

	signal count : integer := 0;
	signal colorSet : std_logic;
	
	--*****************HELPER FUNCTIONS***********************
	function  sqrt  ( d : UNSIGNED ) return UNSIGNED is
		variable a : unsigned(31 downto 0):=d;  --original input.
		variable q : unsigned(15 downto 0):=(others => '0');  --result.
		variable left,right,r : unsigned(17 downto 0):=(others => '0');  --input to adder/sub.r-remainder.
		variable i : integer:=0;

		begin
		for i in 0 to 15 loop
			right(0):='1';
			right(1):=r(17);
			right(17 downto 2):=q;
			left(1 downto 0):=a(31 downto 30);
			left(17 downto 2):=r(15 downto 0);
			a(31 downto 2):=a(29 downto 0);  --shifting by 2 bit.
			if ( r(17) = '1') then
				r := left + right;
			else
				r := left - right;
			end if;
			q(15 downto 1) := q(14 downto 0);
			q(0) := not r(17);
		end loop; 
		return q;

	end sqrt;
	
	function distance(x1, x2, y1, y2 : integer) return integer is
	begin	
			return to_integer(sqrt(to_unsigned(((x2 - x1)**2 + (y2 - y1)**2), 32)));
	end distance;
	--*****************HELPER FUNCTIONS***********************
	
	--*****************COLOR FUNCTIONS***********************
	function hexToRGB(color : std_logic_vector(23 downto 0))return std_logic is
	begin
		R <= color(23 downto 16);
		G <= color(15 downto 8);
		B <= color(7 downto 0);
		return '1';
	end function hexToRGB;
	
	--*****************COLOR FUNCTIONS***********************
	
	--*****************DRAWING FUNCTIONS***********************
	impure function circle(rx, ry, x, y, r : integer) return std_logic is
	begin	
		if distance(rx, x, ry, y) < r then
			return '1';
		else
			return '0';
		end if;
	end circle;
	
	impure function rect(rx, ry, x, y, w, h : integer) return std_logic is
	begin	
		if ((rx <= (x + w) and rx >= x) and (ry <= (y + h) and ry >= y)) then
			return '1';
		else 
			return '0';
		end if;
	end rect;
	--*****************DRAWING FUNCTIONS***********************
		

begin


clk_div:process(CLK)
begin
	if(CLK'event and CLK = '1')then
		clk25 <= not clk25;
	end if;
end process;

VGA_CLOCK <= clk25;

Horizontal_position_counter:process(clk25, RST)
begin
	if(RST = '1')then
		hpos <= 0;
	elsif(clk25'event and clk25 = '1')then
		if (hPos = (HD + HFP + HSP + HBP)) then
			hPos <= 0;
		else
			hPos <= hPos + 1;
		end if;
	end if;
end process;

Vertical_position_counter:process(clk25, RST, hPos)
begin
	if(RST = '1')then
		vPos <= 0;
	elsif(clk25'event and clk25 = '1')then
		if(hPos = (HD + HFP + HSP + HBP))then
			if (vPos = (VD + VFP + VSP + VBP)) then
				vPos <= 0;
			else
				vPos <= vPos + 1;
			end if;
		end if;
	end if;
end process;

Horizontal_Synchronisation:process(clk25, RST, hPos)
begin
	if(RST = '1')then
		HSYNC <= '0';
	elsif(clk25'event and clk25 = '1')then
		if((hPos <= (HD + HFP)) OR (hPos > HD + HFP + HSP))then
			HSYNC <= '1';
		else
			HSYNC <= '0';
		end if;
	end if;
end process;

Vertical_Synchronisation:process(clk25, RST, vPos)
begin
	if(RST = '1')then
		VSYNC <= '0';
	elsif(clk25'event and clk25 = '1')then
		if((vPos <= (VD + VFP)) OR (vPos > VD + VFP + VSP))then
			VSYNC <= '1';
		else
			VSYNC <= '0';
		end if;
	end if;
end process;

video_on:process(clk25, RST, hPos, vPos)
begin
	if(RST = '1')then
		videoOn <= '0';
	elsif(clk25'event and clk25 = '1')then
		if(hPos <= HD and vPos <= VD)then
			videoOn <= '1';
		else
			videoOn <= '0';
		end if;
	end if;
end process;


draw:process(clk25, RST, hPos, vPos, videoOn, MLE1, MLE2, MLE3, MLE4)
begin
	if(RST = '1')then
		colorSet <= hexToRGB(x"000000");
	elsif(clk25'event and clk25 = '1')then
		if(videoOn = '1')then
			count <= count + 1;
			if(rect(hpos, vpos, 75, 250, 100, 230) = '1')then
				colorSet <= hexToRGB(x"00FF00");
			elsif(circle(hpos, vpos, 125, mh1, 50) = '1' and MLE1 = '1')then
				colorSet <= hexToRGB(x"8B4513");
			elsif(rect(hpos, vpos, 200, 250, 100, 230) = '1')then
				colorSet <= hexToRGB(x"00FF00");
			elsif(circle(hpos, vpos, 250, mh2, 50) = '1' and MLE2 = '1')then
				colorSet <= hexToRGB(x"8B4513");
			elsif(rect(hpos, vpos, 325, 250, 100, 230) = '1')then
				colorSet <= hexToRGB(x"00FF00");
			elsif(circle(hpos, vpos, 375, mh3, 50) = '1' and MLE3 = '1')then
				colorSet <= hexToRGB(x"8B4513");
			elsif(rect(hpos, vpos, 450, 250, 100, 230) = '1')then
				colorSet <= hexToRGB(x"00FF00");
			elsif(circle(hpos, vpos, 500, mh4, 50) = '1' and MLE4 = '1')then
				colorSet <= hexToRGB(x"8B4513");
			else
				colorSet <= hexToRGB(x"111111");
			end if;
					
			if count >= 100000 then
				count <= 0;
				if MLE1 = '1' then
					mh1 <= mh1 - 1;
					if mh1 <= 250 then
						mh1 <= 250;
					end if;
				else
					mh1 <= 300;
				end if;
				if MLE2 = '1' then
					mh2 <= mh2 - 1;
					if mh2 <= 250 then
					
						mh2 <= 250;
					end if;
				else
					mh2 <= 300;
				end if;
				if MLE3 = '1' then
					mh3 <= mh3 - 1;
					if mh3 <= 250 then
						mh3 <= 250;
					end if;
				else
					mh3 <= 300;
				end if;
				if MLE4 = '1' then
					mh4 <= mh4 - 1;
					if mh4 <= 250 then
						mh4 <= 250;
					end if;
				else 
					mh4 <= 300;
				end if;
			end if;
		else
			colorSet <= hexToRGB(x"000000");
		end if;
	end if;
end process;


end Behavioral;

